# .github/workflows/ai-deploy.yml

name: MogulMogul AI CI/CD

on:
  push:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: ganghyoun/moggulmoggul-ai
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          # 'dockerfile:'을 올바른 옵션인 'file:'로 수정했습니다.
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 4. EC2에 접속하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            APP_DIR="/home/ubuntu/app/ai"
            REPO_URL="https://github.com/${{ github.repository }}.git"

            # 디렉토리가 없으면 git clone, 있으면 git pull 하도록 수정
            if [ ! -d "$APP_DIR" ] ; then
              git clone $REPO_URL $APP_DIR
              cd $APP_DIR
            else
              cd $APP_DIR
              git pull origin main
            fi

            # .env 파일 생성 (전체 .env 변수를 포함해야 합니다)
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
            echo "OPENAI_PROJECT_ID=${{ secrets.OPENAI_PROJECT_ID }}" >> .env
            echo "OPENAI_ORGANIZATION_ID=${{ secrets.OPENAI_ORGANIZATION_ID }}" >> .env
            echo "PGVECTOR_CONNECTION_STRING=postgresql+psycopg2://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" >> .env
            echo "REDIS_URL=redis://${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT }}/0" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env

            # Docker Hub에서 최신 이미지 받아오기
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

            # docker-compose로 서비스 재시작
            docker-compose up -d --no-build

            # 사용하지 않는 이전 Docker 이미지 정리
            docker image prune -f
