# .github/workflows/ai-deploy.yml

name: MogulMogul AI CI/CD

on:
  push:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: ganghyoun/moggulmoggul-ai

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 4. EC2에 접속하여 배포 (docker-compose.yml 파일 직접 생성)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            APP_DIR="/home/ubuntu/app/ai"
            
            echo "Creating app directory..."
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            echo "Current directory: $(pwd)"
            
            # 기존 컨테이너 정리
            echo "Stopping existing containers..."
            docker-compose down 2>/dev/null || true
            
            # .env 파일 생성
            echo "Creating .env file..."
            cat > .env << 'EOF'
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_PROJECT_ID=${{ secrets.OPENAI_PROJECT_ID }}
            OPENAI_ORGANIZATION_ID=${{ secrets.OPENAI_ORGANIZATION_ID }}
            PGVECTOR_CONNECTION_STRING=postgresql+psycopg2://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}
            REDIS_URL=redis://${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT }}/0
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            EOF

            # docker-compose.yml 파일 생성
            echo "Creating docker-compose.yml file..."
            cat > docker-compose.yml << 'EOF'
            version: '3.8'

            services:
              # FastAPI 애플리케이션 서버
              fastapi:
                image: ganghyoun/moggulmoggul-ai:latest
                container_name: momo_fastapi
                restart: unless-stopped
                ports:
                  - "8000:8000"
                env_file:
                  - .env
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                logging:
                  driver: "json-file"
                  options:
                    max-size: "10m"
                    max-file: "3"

              # Celery 워커 서버
              celery:
                image: ganghyoun/moggulmoggul-ai:latest
                container_name: momo_celery
                restart: unless-stopped
                command: celery -A app.celery_config.celery_app worker --loglevel=info
                env_file:
                  - .env
                healthcheck:
                  test: ["CMD", "celery", "-A", "app.celery_config.celery_app", "inspect", "ping"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                logging:
                  driver: "json-file"
                  options:
                    max-size: "10m"
                    max-file: "3"

            networks:
              default:
                name: momo_network
            EOF

            echo "Files created:"
            ls -la

            # Docker Hub에서 최신 이미지 받아오기
            echo "Pulling latest Docker image..."
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

            # docker-compose로 서비스 시작
            echo "Starting services with docker-compose..."
            docker-compose up -d --no-build

            # 컨테이너 상태 확인
            echo "Container status:"
            docker-compose ps

            # 사용하지 않는 이전 Docker 이미지 정리
            echo "Cleaning up unused Docker images..."
            docker image prune -f