# .github/workflows/ai-deploy.yml

name: MogulMogul AI CI/CD

on:
  push:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: ganghyoun/moggulmoggul-ai 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 4. EC2에 접속하여 배포 (백그라운드 실행 방식으로 변경)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -ex

            APP_DIR="/home/ubuntu/app/ai"
            AUTH_REPO_URL="https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git"

            # 1. 소스 코드 업데이트
            if [ -d "$APP_DIR/.git" ]; then
              cd $APP_DIR
              git fetch origin
              git reset --hard origin/main
            else
              git clone $AUTH_REPO_URL $APP_DIR
              cd $APP_DIR
            fi
            
            # 2. .env 파일 생성
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
            echo "OPENAI_PROJECT_ID=${{ secrets.OPENAI_PROJECT_ID }}" >> .env
            echo "OPENAI_ORGANIZATION_ID=${{ secrets.OPENAI_ORGANIZATION_ID }}" >> .env
            echo "PGVECTOR_CONNECTION_STRING=postgresql+psycopg2://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" >> .env
            echo "REDIS_URL=redis://${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT }}/0" >> .env
            # 모든 AWS 관련 정보는 Secrets를 통해 주입합니다.
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

            # .env 파일에 RDS 관련 환경 변수 추가
            echo "POSTGRES_DB=${{ secrets.RDS_DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.RDS_USERNAME }}" >> .env # RDS_USERNAME Secret을 사용해야 합니다.
            echo "POSTGRES_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env

            # 3. 백그라운드에서 배포 스크립트 실행
            # nohup: SSH 연결이 끊겨도 계속 실행
            # > deploy.log 2>&1: 모든 로그를 deploy.log 파일에 저장
            # &: 백그라운드에서 실행
            nohup bash -c ' \
              echo "--- (Background) Pulling latest Docker image ---"; \
              docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest; \
              echo "--- (Background) Starting services with docker-compose ---"; \
              docker-compose up -d --no-build; \
              echo "--- (Background) Cleaning up unused Docker images ---"; \
              docker image prune -f; \
              echo "--- (Background) Deployment script finished! ---"; \
            ' > deploy.log 2>&1 &
