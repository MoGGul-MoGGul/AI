# .github/workflows/ai-deploy.yml

name: MogulMogul AI CI/CD

on:
  push:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: ganghyoun/moggulmoggul-ai

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 4. EC2에 접속하여 배포 (디버깅 강화)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # -e: 오류 발생 시 즉시 스크립트 중단
            # -x: 실행되는 모든 명령어를 로그에 출력
            set -ex

            APP_DIR="/home/ubuntu/app/ai"
            AUTH_REPO_URL="https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git"

            echo "--- Starting deployment script on EC2 ---"

            if [ -d "$APP_DIR/.git" ]; then
              echo "--- Repository exists. Pulling latest changes. ---"
              cd $APP_DIR
              git pull $AUTH_REPO_URL main
            else
              echo "--- Repository does not exist. Cloning new repository. ---"
              rm -rf $APP_DIR
              git clone $AUTH_REPO_URL $APP_DIR
            fi
            
            echo "--- Git operation complete. Changing to app directory. ---"
            cd $APP_DIR

            echo "--- Listing files in directory to confirm clone/pull ---"
            ls -al

            echo "--- Creating .env file ---"
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
            echo "OPENAI_PROJECT_ID=${{ secrets.OPENAI_PROJECT_ID }}" >> .env
            echo "OPENAI_ORGANIZATION_ID=${{ secrets.OPENAI_ORGANIZATION_ID }}" >> .env
            echo "PGVECTOR_CONNECTION_STRING=postgresql+psycopg2://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" >> .env
            echo "REDIS_URL=redis://${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT }}/0" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
            echo "--- .env file created. ---"

            echo "--- Pulling latest Docker image ---"
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

            echo "--- Starting services with docker-compose ---"
            docker-compose up -d --no-build

            echo "--- Cleaning up unused Docker images ---"
            docker image prune -f
            
            echo "--- Deployment script finished successfully! ---"
