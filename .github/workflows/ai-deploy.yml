# .github/workflows/ai-deploy.yml

name: MogulMogul AI CI/CD

on:
  push:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: ganghyoun/moggulmoggul-ai 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 4. EC2에 접속하여 배포
      # .github/workflows/deploy.yml
name: Deploy to EC2

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ubuntu@${{ secrets.EC2_HOST }} '
            cd ~/AI # 프로젝트 디렉토리로 이동
            git pull origin main # 최신 코드 가져오기

            # 1. 기본 이미지를 먼저 빌드합니다.
            # requirements.txt가 변경되지 않았다면 이 단계는 캐시를 사용해 매우 빠르게 완료됩니다.
            docker-compose build base

            # 2. web과 celery 서비스를 빌드합니다.
            # 이 단계들도 캐시된 base 이미지를 사용하므로 코드 복사만 수행합니다.
            docker-compose build web celery

            # 3. 컨테이너를 백그라운드에서 실행합니다.
            # --remove-orphans 옵션은 compose 파일에서 사라진 서비스를 중지하고 삭제합니다.
            docker-compose up -d --remove-orphans

            # 4. 불필요한 Docker 이미지(dangling images)를 정리하여 서버 용량을 확보합니다.
            docker image prune -f
          '